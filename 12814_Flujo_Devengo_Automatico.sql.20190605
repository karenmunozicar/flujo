delete from isys_querys_tx where llave='12814';
insert into isys_querys_tx values ('12814',10,1,2,'Arma el Json del Devengo y lo envia',4013,300,101,0,0,20,20);
insert into isys_querys_tx values ('12814',20,1,1,'select procesa_resp_ms_12814(''$$__JSONCOMPLETO__$$''::json) as __json__',0,0,0,1,1,0,0);

create or replace function dp_envia_devengo_12814(json)
    returns json
    as $function$
declare
    json1                  alias for $1;
    json2                  json;

    v_codigo_dv            varchar;
    v_completitud          json;
    v_titulo_devengo       varchar;
    v_descripcion_devengo  varchar;
    v_reg_devengo          record;

    v_json_devengo         json;
    v_json_devengo_detalle json;
    v_json_dte             json;
    v_json_devengo_sigfe   json;
    v_json_rc              json;
begin
    json2:=json1;
    v_codigo_dv:=coalesce(get_json('codigo_dv', json2), '0');
    v_titulo_devengo:=coalesce(get_json('titulo_devengo', json2), '');
    v_descripcion_devengo:=coalesce(get_json('descripcion_devengo', json2), '');

    json2:=put_json(json2,'LLAMA_FLUJO','NO');

    v_completitud:=dp_verifica_completitud(json2);

    update pantalla_dinamica set tipo='INPUT' where nombre='folio_desde' and strpos(condicion,'''##TIPO_DTE##''=''801''')>0;

    if v_titulo_devengo <> '' then
        update dp_devengo set titulo = substring(v_titulo_devengo, 1, 79) where codigo_dv = v_codigo_dv::bigint;
    end if;

    if v_descripcion_devengo <> '' then
        update dp_devengo set descripcion = substring(v_descripcion_devengo, 1, 250) where codigo_dv = v_codigo_dv::bigint;
    end if;

    if get_json('STATUS', v_completitud) = 'NK' then
        json2:=response_requests_6000('2', get_json('ERRORES', v_completitud), '', json2);
        return json2;
    end if;

    -- FGE - 20190522 - Se incluye el codigo OC y RC para poder determinar la fecha recepcion
    select codigo_dv, dte_codigo_txel, estado, uri_dte, codigo_oc, codigo_rc, rut_emisor  from dp_devengo where codigo_dv = v_codigo_dv::bigint into v_reg_devengo;

    if v_reg_devengo.estado = 'EN_PROCESO' then
        json2:=response_requests_6000('2', 'El Devengo ya fue generado anteriormente', '', json2);
        return json2;
    else
        -- Si está completo entonces marco el devengo como NO_ENVIADO
       perform dp_act_estado_devengo(v_reg_devengo.codigo_dv, 'NO_ENVIADO', '');
       --update dp_devengo set estado = 'NO_ENVIADO' where codigo_dv = v_reg_devengo.codigo_dv;
    end if;

    -- Info del devengo
    select array_to_json(array_agg(row_to_json(sql))) into v_json_devengo from (select codigo_dv::varchar, area_transaccional, periodo::varchar, ejercicio::varchar, titulo, descripcion, monto_devengo, rut_receptor::varchar || '-' || modulo11(rut_receptor::varchar) as rut_receptor, codigo_oc, folio_requerimiento, case when contabilizar_iva = true then 'Y' else 'N' end as contabilizar_iva from dp_devengo where codigo_dv = v_codigo_dv::bigint) sql;

    -- Info del DTE
    if coalesce(v_reg_devengo.dte_codigo_txel,'') = '' then
	    select array_to_json(array_agg(row_to_json(sql))) into v_json_dte from (select folio::varchar, tipo_dte::varchar, fecha_emision, fecha_sii, fecha_ingreso, monto_iva, monto_neto, monto_excento from dte_recibidos where uri=v_reg_devengo.uri_dte) sql;
    else
	    select array_to_json(array_agg(row_to_json(sql))) into v_json_dte from (select folio::varchar, tipo_dte::varchar, fecha_emision, fecha_sii, fecha_ingreso, monto_iva, monto_neto, monto_excento from dte_recibidos where codigo_txel = v_reg_devengo.dte_codigo_txel::bigint) sql;
    end if;
    -- Info del detalle de las cuentas contables
    select array_to_json(array_agg(row_to_json(sql))) into v_json_devengo_detalle from (select folio, cod_imputacion, debe, cuenta_debe, cuenta_haber, cod_combinacion, requerimiento, tipo_detalle, catalogo_tipo, cod_catalogo from dp_devengo_detalle where codigo_dv = v_codigo_dv::bigint and debe>0) sql;

    -- FGE - 20190522 - Información del RC
    select array_to_json(array_agg(row_to_json(sql))) into v_json_rc from (select id, fecha_ingreso from token_de_emitidos where rut_emisor = v_reg_devengo.rut_emisor and tipo_dte = 801 and folio = v_reg_devengo.codigo_oc and token = v_reg_devengo.codigo_rc) sql;

    perform logfile('----- FGE - json_rc: ' || v_json_rc);

    perform logfile('----- FGE - json_devengo: ' || v_json_devengo::varchar);

    v_json_devengo_sigfe:=dp_arma_json_devengo(v_json_devengo::varchar, v_json_devengo_detalle::varchar, v_json_dte::varchar, 'interDTE', v_json_rc::varchar);

    perform logfile('----- FGE - registra devengo: ' || v_json_devengo_sigfe::varchar);
 
    -- Cargo los parametros para el flujo y paso el json del devengo
    json2:=put_json(json2,'LLAMA_FLUJO','SI');
    json2:=put_json(json2,'__SECUENCIAOK__','12814');
    json2:=get_parametros_motor_json(json2,'REGISTRADEVENGO_CHC');
    json2:=put_json(json2,'HOST_MS','servicios.acepta.com');
    json2:=put_json(json2,'URI_MS','chilecompra/registradevengo');
    json2:=put_json(json2,'DATA_JSON',encode_hex(v_json_devengo_sigfe::varchar));
    json2:=put_json(json2,'LARGO_JSON',(length(encode_hex(v_json_devengo_sigfe::varchar))/2)::varchar);

    json2:=logjson(json2,'Llama Flujo 12814');
    --json2:=response_requests_6000('2', 'Error de conexión, inténtelo nuevamente', '', json2);
    return json2;

end;
$function$ language plpgsql;


create or replace function dp_arma_json_devengo(devengo_in text, devengo_detalle_in text, dte_in text, usuario_sigfe_in text, rc_in text)
    returns text
    as $function$
import json
import datetime
import string

printable = set(string.printable)

# Primero tabla de correspondencias entre tipo_dte y el codigo de sigfe
tipo_dte={}
tipo_dte['33'] = '0102'
tipo_dte['34'] = '0202'
tipo_dte['56'] = '0402'
tipo_dte['61'] = '0502'

# Luego limpio la variable de salida
json_out = {}
# Convierto los parametros de entrada a json
json_devengo = json.loads(devengo_in)[0]
json_devengo_detalle = json.loads(devengo_detalle_in)
json_dte = json.loads(dte_in)[0]

temp_rc_in = rc_in

if temp_rc_in != None and temp_rc_in != '':
        temp_fecha = str(json.loads(temp_rc_in)[0]['fecha_ingreso'])
        fecha_recepcion_conforme = '%s-%s-%s' % (temp_fecha[:4], temp_fecha[4:6], temp_fecha[6:8])
else:
        fecha_recepcion_conforme = None

# La fecha es la fecha de emision del documento
fecha = json_dte['fecha_emision']

#Si la fecha de ingreso es menor que la fecha de emision, entonces tomamos la fecha de emision
if json_dte['fecha_ingreso'][:10] > fecha:
        fecha_ingreso = json_dte['fecha_ingreso'][:10]
else:
        fecha_ingreso = fecha

# Si no existe fecha de RC
if fecha_recepcion_conforme == None:
        fecha_recepcion_conforme = fecha
elif fecha_recepcion_conforme < fecha:
        fecha_recepcion_conforme = fecha
      
if temp_rc_in != None and temp_rc_in != '':
        fecha_recepcion_conforme = json.loads(temp_rc_in)[0]['fecha_ingreso']
else:
        fecha_recepcion_conforme = None

# Creamos el messageID "Unico"
#messageID = '%s%08d' % (datetime.datetime.now().strftime('%y%m%d%H%M%S'), int(json_devengo['codigo_dv']))
messageID = '%s%07d' % (datetime.datetime.now().strftime('%y%m%d%H%M%S'), int(json_devengo['codigo_dv']))

#
# Creacion de la cabecera
cabecera = {}
cabecera['ejercicio'] = json_devengo['ejercicio']
cabecera['periodo'] = json_devengo['periodo']
cabecera['proceso'] = '0301'
cabecera['usuarioSigfe'] = usuario_sigfe_in
cabecera['messageID'] = messageID  #message_id_in
# Construyo la institucion
institucion = {}
institucion['partida'] = json_devengo['area_transaccional'][0:2]
institucion['capitulo'] = json_devengo['area_transaccional'][2:4]
institucion['areaTransaccional'] = json_devengo['area_transaccional'][4:7]
cabecera['institucion'] = institucion

# Finalmente el detalle del devengo
detalles = {}
devengos = []
devengo = {}
catalogos_imputados = {"imputacion": []}
devengo['id'] = json_devengo['codigo_dv']
devengo['titulo'] = filter(lambda x: x in printable, json_devengo['titulo'])
devengo['descripcion'] = filter(lambda x: x in printable, json_devengo['descripcion'])
# Documentos
documentos = {}
# Documentos
documento = []
# Documento del devengo...
documento_devengo = {}
documento_devengo['numero'] = json_dte['folio']
if json_dte['tipo_dte'] == '33':
	documento_devengo['monto'] = json_dte['monto_neto']
else:
	documento_devengo['monto'] = json_dte['monto_excento']
documento_devengo['tipo'] = tipo_dte[json_dte['tipo_dte']]

#Fechas
#documento_devengo['fecha'] = json_dte['fecha_emision']
#if json_dte['fecha_ingreso'][:10] > json_dte['fecha_emision']:
#        documento_devengo['fechaIngreso'] = json_dte['fecha_emision']
#else:
#        documento_devengo['fechaIngreso'] = json_dte['fecha_ingreso'][:10]
#documento_devengo['fechaRecepcionConforme'] = json_dte['fecha_sii'][:10]
#
documento_devengo['fecha'] = fecha
documento_devengo['fechaIngreso'] = fecha_ingreso
documento_devengo['fechaRecepcionConforme'] = fecha_recepcion_conforme


documento_devengo['descripcion'] = json_devengo['descripcion']
documento_devengo['fechaRecepcionConforme'] = json_dte['fecha_sii'][:10]
if str(json_devengo['codigo_oc']) <> '':
    documento_devengo['numeroOrdenCompra'] = str(json_devengo['codigo_oc'])
else:
    documento_devengo['numeroOrdenCompra'] = None
principales = {}
principal = []
principal_devengo = {}
principal_devengo['id'] = json_devengo['rut_receptor']
cumplimientos = {}
cumplimiento = []
cumplimiento_devengo = {}
cumplimiento_devengo['fecha'] = datetime.datetime.strftime(datetime.datetime.strptime(json_dte['fecha_sii'][:10], '%Y-%m-%d') + datetime.timedelta(days = 30), '%Y-%m-%d')
if json_dte['tipo_dte'] == '33':
	cumplimiento_devengo['monto'] = json_dte['monto_neto']
else:
	cumplimiento_devengo['monto'] = json_dte['monto_excento']
cumplimiento_devengo['idPrincipalRelacionado'] = json_devengo['rut_receptor']
cumplimiento.append(cumplimiento_devengo)
cumplimientos['cumplimiento'] = cumplimiento
principal_devengo['cumplimientos'] = cumplimientos
transacciones_previas = {}
transaccion = []
####################################################################
#for json_transaccion in json_devengo_detalle:
#    transaccion_devengo = {}
#    transaccion_devengo['folio'] = json_devengo['folio_requerimiento']
#    transaccion_devengo['tipo'] = '2'
#    transaccion_devengo['idAgrupacionDeReferencia'] = json_transaccion['cod_combinacion']  ##########  ->  Bitten Sie einen Buchhalter von Sigfe, seien Sie vorsichtig!  
#    agrupacionesDeImputacionesACatalogos = {}
#    agrupacion = []
#    agrupacion_devengo = {}
#    imputacionesAConceptosPresupuestario = {}
#    agrupacion_devengo['imputacionesAConceptosPresupuestarios'] = imputacionesAConceptosPresupuestario
#    imputacion = []
#    imputacion_devengo = {}
#    imputacion_devengo['codigo'] = json_transaccion['cod_imputacion']
#    imputacion_devengo['monto'] = json_transaccion['debe']
#    contabilizaciones = {}
#    contabilizacion = []
#    contabilizacion_devengo = {}
#    contabilizacion_devengo['cuentaDebe'] = json_transaccion['cuenta_debe']
#    contabilizacion_devengo['cuentaHaber'] = json_transaccion['cuenta_haber']
#    contabilizacion_devengo['montoDebe'] = json_transaccion['debe']
#    contabilizacion_devengo['montoHaber'] = json_transaccion['debe']
#    contabilizacion.append(contabilizacion_devengo)
#    contabilizaciones['contabilizacion'] = contabilizacion
#    imputacion_devengo['contabilizaciones'] = contabilizaciones
#    imputacion.append(imputacion_devengo)
#    imputacionesAConceptosPresupuestario['imputacion'] = imputacion
#    agrupacion.append(agrupacion_devengo)
#    agrupacionesDeImputacionesACatalogos['agrupacion'] = agrupacion
#    transaccion_devengo['agrupacionesDeImputacionesACatalogos'] = agrupacionesDeImputacionesACatalogos
#    transaccion.append(transaccion_devengo)
#    transacciones_previas['transaccion'] = transaccion
####################################################################

####################################################################
transaccion_lista = []
for cuenta in json_devengo_detalle:
    transaccion_temp = None
    for transaccion in transaccion_lista:
        if cuenta['tipo_detalle'] == 2:
            if transaccion['folio'] == cuenta['folio'] and transaccion['tipo'] == str(cuenta['tipo_detalle']) and transaccion['idAgrupacionDeReferencia'] == cuenta['cod_combinacion']:
                transaccion_temp = transaccion
        else:
            if transaccion['folio'] == cuenta['requerimiento'] and transaccion['tipo'] == str(cuenta['tipo_detalle']) and transaccion['idAgrupacionDeReferencia'] == cuenta['cod_combinacion']:
                transaccion_temp = transaccion
    if transaccion_temp == None:
        transaccion_temp = {}
        if cuenta['tipo_detalle'] == 2:
            transaccion_temp['folio'] = cuenta['folio']
        else:
            transaccion_temp['folio'] = cuenta['requerimiento']
        transaccion_temp['tipo'] = str(cuenta['tipo_detalle'])
        transaccion_temp['idAgrupacionDeReferencia'] = cuenta['cod_combinacion']
        transaccion_temp['agrupacionesDeImputacionesACatalogos'] = {'agrupacion': []}
        transaccion_lista.append(transaccion_temp)
    
    imputacion_temp = None
    
    for agrupacion in transaccion_temp['agrupacionesDeImputacionesACatalogos']['agrupacion']:
        for imputacion in agrupacion['imputacionesAConceptosPresupuestarios']['imputacion']:
            if imputacion['codigo'] == cuenta['cod_imputacion']:
                imputacion_temp = imputacion 
    
    if imputacion_temp != None:
        imputacion_temp['monto'] +=cuenta['debe']
        imputacion_temp['contabilizaciones']['contabilizacion'].append({'cuentaDebe': cuenta['cuenta_debe'], 
                                                     'cuentaHaber': cuenta['cuenta_haber'], 
                                                     'montoDebe': cuenta['debe'], 
                                                     'montoHaber': cuenta['debe']})
    else:
        transaccion_temp['agrupacionesDeImputacionesACatalogos']['agrupacion'].append(
            {'imputacionesAConceptosPresupuestarios': {
                'imputacion': [{
                    'codigo': cuenta['cod_imputacion'],
                    'monto': cuenta['debe'],
                    'contabilizaciones': {
                        'contabilizacion': [{'cuentaDebe': cuenta['cuenta_debe'], 'cuentaHaber': cuenta['cuenta_haber'], 'montoDebe': cuenta['debe'], 'montoHaber': cuenta['debe']}]}}]}})

    if cuenta['tipo_detalle'] == 1:
        catalogo_found = 'false'
        for agrupacion in transaccion_temp['agrupacionesDeImputacionesACatalogos']['agrupacion']:
            if 'imputacionesACatalogosDeReagrupacion' in agrupacion:
                for imputacion in agrupacion['imputacionesACatalogosDeReagrupacion']['imputacion']:
                    if imputacion['catalogo'] == cuenta['catalogo_tipo'] and imputacion['elemento'] == cuenta['cod_catalogo']:
                        catalogo_found = 'true'
                if catalogo_found == 'false':
                    transaccion_temp['agrupacionesDeImputacionesACatalogos']['agrupacion'][0]['imputacionesACatalogosDeReagrupacion']['imputacion'].append({"catalogo": cuenta['catalogo_tipo'], "elemento": cuenta['cod_catalogo']})
            else:
                transaccion_temp['agrupacionesDeImputacionesACatalogos']['agrupacion'][0]['imputacionesACatalogosDeReagrupacion']={'imputacion': [{"catalogo": cuenta['catalogo_tipo'], "elemento": cuenta['cod_catalogo']}]}

        catalogo_found = 'false'
        for catalogo_item in catalogos_imputados['imputacion']:
            if catalogo_item['catalogo'] == cuenta['catalogo_tipo'] and catalogo_item['elemento'] == cuenta['cod_catalogo']:
                catalogo_found = 'true'
        if catalogo_found == 'false' and cuenta['catalogo_tipo'] != '' and cuenta['catalogo_tipo'] != '':
            catalogos_imputados['imputacion'].append({"catalogo": cuenta['catalogo_tipo'], "elemento": cuenta['cod_catalogo']})

transacciones_previas['transaccion'] = transaccion_lista
####################################################################


principal_devengo['transaccionesPrevias'] = transacciones_previas
principal.append(principal_devengo)
principales['principal'] = principal
documento_devengo['principales'] = principales
impuestos = {}
impuesto = []
if json_dte['tipo_dte'] == '33':
    impuesto_devengo = {}
    impuesto_devengo['codigo'] = '1'
    impuesto_devengo['monto'] = str(json_dte['monto_neto'])
    impuesto.append(impuesto_devengo)
    if json_devengo['contabilizar_iva'] == 'Y':
    	impuestos['contabilizaImpuestos'] = 'true'
    else:
        impuestos['contabilizaImpuestos'] = 'false'
else:
    impuestos['contabilizaImpuestos'] = 'false'
impuestos['impuesto'] = impuesto
documento_devengo['impuestos'] = impuestos

#imputacionesACatalogosContables = {}
#imputacion = []
#imputacion_devengo = {}
#imputacion.append(imputacion_devengo)
#documento_devengo['imputacionesACatalogosContables'] = imputacionesACatalogosContables
documento.append(documento_devengo)
documentos['documento'] = documento
devengo['documentos'] = documentos

if len(catalogos_imputados['imputacion']) > 0:
    devengo['imputacionesACatalogosContables'] = catalogos_imputados

devengos.append(devengo)
detalles['devengo'] = devengos

json_out['cabecera'] = cabecera
json_out['detalles'] = detalles

return json.dumps(json_out)
$function$ language plpythonu;


create or replace function procesa_resp_ms_12814(json)
    returns json
    as $function$
declare
    json1              alias for $1;
    json2              json;
    json3              json;
    v_respuesta        varchar;
    v_descripcion      varchar;
    v_codigo_dv        varchar;
    v_track_id         varchar;
    v_dte_codigo_txel  varchar;
    xml3               varchar;

    v_reg_devengo  record;
    v_reg_dte      record;
begin
    json2:=json1;
    v_codigo_dv:=get_json('codigo_dv', json2);

    v_respuesta:=get_json('RESPUESTA',json2);
    if(strpos(v_respuesta,'HTTP/1.1 200')=0) then
        json3:=put_json(json3,'MENSAJE_VACIO','Error conexion servicio');
        json2:=response_requests_6000('1', 'OK', json3::varchar, json2);
        return json2;
    end if;

    BEGIN
        v_respuesta:=split_part(v_respuesta,chr(10)||chr(10),2);
    EXCEPTION WHEN OTHERS THEN
        json3:=put_json(json3,'MENSAJE_VACIO','Error al leer respuesta servicio');
        json2:=response_requests_6000('1', 'OK', json3::varchar, json2);
        return json2;
    END;

    v_track_id:=get_json('codigo', v_respuesta::json);
    v_descripcion:=get_json('descripcion', v_respuesta::json);

    select dte_codigo_txel into v_dte_codigo_txel from dp_devengo where codigo_dv = v_codigo_dv::bigint;

    if v_track_id <> '' then
        perform dp_act_estado_devengo(v_codigo_dv::bigint, 'EN_PROCESO', '');
        update dp_devengo set ticket_id = v_track_id, fecha_creacion = now(), fecha_emision = now() where codigo_dv = v_codigo_dv::bigint;
        update dte_recibidos set data_dte = put_data_dte(data_dte, 'TICKET_DEVENGO', v_track_id) where codigo_txel = v_dte_codigo_txel::bigint;
        select codigo_rc, codigo_oc, rut_emisor, rut_receptor, dte_codigo_txel from dp_devengo where codigo_dv = v_codigo_dv::bigint into v_reg_devengo;

        select folio, tipo_dte, uri from dte_recibidos where codigo_txel = v_reg_devengo.dte_codigo_txel::bigint into v_reg_dte;

        update token_de_emitidos set estado = 'PAGADO' where token = v_reg_devengo.codigo_rc and folio = v_reg_devengo.codigo_oc and rut_emisor = v_reg_devengo.rut_emisor and rut_receptor = v_reg_devengo.rut_receptor;
        json2:=response_requests_6000('1', 'Enviado: TrackID - ' || v_track_id || ', Descripción: ' || v_descripcion, '', json2);
        json2:=put_json(json2,'RESPUESTA_COLA','OK');

        xml3:='';
        xml3:=put_campo(xml3,'RUT_EMISOR', v_reg_devengo.rut_receptor::varchar); -- '96919050');
        xml3:=put_campo(xml3,'RUT_OWNER',' ' || v_reg_devengo.rut_emisor::varchar || ' ');
        xml3:=put_campo(xml3,'FECHA_EVENTO',now()::varchar);
        xml3:=put_campo(xml3,'RUT_RECEPTOR', v_reg_devengo.rut_emisor::varchar); --'7621836');
        xml3:=put_campo(xml3,'FOLIO', v_reg_dte.folio::varchar); --'113406');
        xml3:=put_campo(xml3,'TIPO_DTE', v_reg_dte.tipo_dte::varchar); --'52');
        xml3:=put_campo(xml3,'CANAL','RECIBIDOS');
        xml3:=put_campo(xml3,'URI_IN', v_reg_dte.uri); -- 'http://pruebasacepta1705.acepta.com/v01/00000000000000_1721614117_1812593659_72_?k=71954f57f2bdbaf140312c054a6513a1');
        xml3:=put_campo(xml3,'COMENTARIO_TRAZA',' Exitoso TicketID: ' || v_track_id);
        xml3:=put_campo(xml3,'EVENTO','ENVIO_DEVENGO');  
        xml3:=graba_bitacora(xml3,'ENVIO_DEVENGO');

    elsif v_descripcion = 'Periodo No Abierto' then
        perform dp_act_estado_devengo(v_codigo_dv::bigint, 'NO_ENVIADO', '');
        json2:=response_requests_6000('1', 'En espera de apertura del periodo', '', json2);
        json2:=put_json(json2,'RESPUESTA_COLA','OK');
    else
        perform dp_act_estado_devengo(v_codigo_dv::bigint, 'BORRADOR', '');
        json2:=response_requests_6000('2', 'Error: ' || v_descripcion, '', json2);
        json2:=put_json(json2,'RESPUESTA_COLA','EJERCICIO_CERRADO');
    end if;
	
    return json2;
end;
$function$ language plpgsql;




