delete from isys_querys_tx where llave='8010';

--Primero que hacemos el publicar DTE
insert into isys_querys_tx values ('8010',10,1,8,'Publica DTE',12704,0,0,0,0,20,20);

-- Prepara llamada al AML
insert into isys_querys_tx values ('8010',20,1,1,'select proc_procesa_input_dte(''$$__XMLCOMPLETO__$$'') as __xml__',0,0,0,1,1,-1,0);

--Borra o Actualiza el contenido de la cola
insert into isys_querys_tx values ('8010',1000,1,1,'select proc_verifica_fin_dte_8010(''$$__XMLCOMPLETO__$$'') as __xml__',0,0,0,1,1,0,0);

--Llamada al Flujo de Publicacion
insert into isys_querys_tx values ('8010',100,1,8,'Llamada Publica DTE',12704,0,0,0,0,1000,1000);

--Llamada al Flujo de Escritura Directa al EDTE para Mandatos
insert into isys_querys_tx values ('8010',110,1,8,'Llamada Publica Mandato  EDTE',12770,0,0,0,0,120,120);
--Llamada a Grabar en Respaldo NINA
--insert into isys_querys_tx values ('8010',115,1,8,'Llamada Publica Respaldo',12713,0,0,0,0,120,120);
--Llamada al Flujo de Escritura Directa al EDTE
insert into isys_querys_tx values ('8010',120,1,8,'Llamada Publica EDTE',12702,0,0,0,0,40,40);

--Para envio de mandatos de boletas
insert into isys_querys_tx values ('8010',1600,1,8,'Llamada Publica Mandato  EDTE',12770,0,0,0,0,40,40);


--Llamada al AML por el Apache
--insert into isys_querys_tx values ('8010',30,1,2,'Llamada al AML',4001,100,101,0,0,40,40);
--Llamada al AML directo SGCI
insert into isys_querys_tx values ('8010',30,1,2,'Llamada directo al AML',14000,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',31,1,2,'Llamada directo al AML',14001,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',32,1,2,'Llamada directo al AML',14002,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',33,1,2,'Llamada directo al AML',14003,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',34,1,2,'Llamada directo al AML',14004,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',35,1,2,'Llamada directo al AML',14005,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',36,1,2,'Llamada directo al AML',14006,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',37,1,2,'Llamada directo al AML',14007,102,101,0,0,40,40);
insert into isys_querys_tx values ('8010',38,1,2,'Llamada directo al AML',14008,102,101,0,0,40,40);
--AML CGE
insert into isys_querys_tx values ('8010',39,1,2,'Llamada directo al AML CGE',14009,102,101,0,0,40,40);
--Respuesta del AML
insert into isys_querys_tx values ('8010',40,1,1,'select proc_procesa_respuesta_dte(''$$__XMLCOMPLETO__$$'') as __xml__ ',0,0,0,1,1,-1,0);

--Flujo de Mandato de Boletas y DTE
--Va directo al 1000 para verificar si le fue bien en el flujo y se borra de la cola
insert into isys_querys_tx values ('8010',150,1,8,'Flujo Mandato Boletas y DTEs',12712,0,0,0,0,1000,1000);

--Flujo de Mensajes Basura con y sin URI
insert into isys_querys_tx values ('8010',500,1,8,'Flujo 9999 Basura',9999,0,0,1,1,1000,1000);
insert into isys_querys_tx values ('8010',510,1,8,'Flujo 9999 Basura',9999,0,0,1,1,1000,1000);


--Lee tabla webdte.boletas de base 
--insert into isys_querys_tx values ('8010',200,3,1,'select * from webdte.boletas where rut=split_part(''$$RUT_EMISOR$$'',''-'',1) and periodo=(substring(''$$FECHA_EMISION$$'',1,4)||substring(''$$FECHA_EMISION$$'',6,2))::numeric order by periodo asc',0,0,0,1,1,250,250);

--Acumula Boletas webiecv
insert into isys_querys_tx values ('8010',200,3,1,'select proc_graba_webiecv_boletas_8010(''$$__XMLCOMPLETO__$$'') as respuesta_boleta',0,0,0,1,1,210,210);
--insert into isys_querys_tx values ('8010',210,1,1,'select proc_procesa_respuesta_boleta_8010(''$$__XMLCOMPLETO__$$'') as __xml__ ',0,0,0,1,1,-1,0);


--Flujo de validacion de certificados X509
insert into isys_querys_tx values ('8010',250,1,8,'Flujo Validacion Certificado x509',12729,0,0,1,1,0,0);

--Flujo de los CA4ARM
insert into isys_querys_tx values ('8010',1500,1,8,'Flujo ARM',12718,0,0,1,1,0,0);
--Flujo de los CA4RESP
insert into isys_querys_tx values ('8010',1510,1,8,'Flujo RESP',12727,0,0,1,1,0,0);
--Flujo de los CA4AEC
insert into isys_querys_tx values ('8010',1520,1,8,'Flujo AEC',12728,0,0,1,1,0,0);
--Flujo de los CA4REC Recibidos
insert into isys_querys_tx values ('8010',1530,1,8,'Flujo Recibidos',12703,0,0,1,1,0,0);

--Flujo de los CA4LIB, igual que el de WEBIECV
insert into isys_querys_tx values ('8010',700,1,8,'Flujo CA4LIB',12788,0,0,1,1,0,0);
--Flujo de los CA4RCF, igual que el de WEBIECV
insert into isys_querys_tx values ('8010',710,1,8,'Flujo CA4RCF',12802,0,0,1,1,0,0);

--Verifica el control de termino del DTE
CREATE or replace FUNCTION proc_verifica_fin_dte_8010(varchar) RETURNS varchar AS $$
DECLARE
	xml1        alias for $1;
	xml2    varchar;
BEGIN
    xml2:=xml1;
    xml2 := sp_procesa_respuesta_cola_motor(xml2);
    return xml2;
END;
$$ LANGUAGE plpgsql;



CREATE or replace FUNCTION proc_procesa_input_dte(varchar) RETURNS varchar AS $$
DECLARE
    xml1	alias for $1;
	xml2	varchar;
    data1	varchar;
    file1	varchar;
    sts		integer;
    host1	varchar;
    url1	varchar;
    respuesta1	varchar;
    resp1	varchar;
    status1	varchar;
    json1	json;
    data_anulacion varchar;
 
    stSecuencia secuencia_aml%ROWTYPE;    
BEGIN
    xml2:=xml1;

    --xml2:=logapp(xml2,'__ID_DTE__='||get_campo('__ID_DTE__',xml2));
    --xml2:=logapp(xml2,'__COLA_MOTOR__='||get_campo('__COLA_MOTOR__',xml2));

    --Si es un nagios, ignoro el procesamiento
    if (get_campo('REQUEST_METHOD',xml2)='GET') then
	if ((strpos(get_campo('HTTP_USER_AGENT',xml2),'check_http')>0) or (length(get_campo('QUERY_STRING',xml2))=0)) then
                xml2 := logapp(xml2,'Nagios Check o GET sin datos, se ignora');
                --Se Responde OK
                xml2:=put_campo(xml2,'RESPUESTA','Status: 200 OK'||chr(10)||
                'Content-type: text/html; charset=iso-8859-1'||chr(10)||
                'Content-length: 0'||chr(10)||
                'Vary: Accept-Encoding'||chr(10)||chr(10));
                xml2 := put_campo(xml2,'__SECUENCIAOK__','0');
		xml2 := sp_procesa_respuesta_cola_motor(xml2);
		xml2 := put_campo_ctx(xml2,'__ETAPA1__','OK');
                return xml2;
	end if;
    end if;

    --verifico si el documento ya fue publicado en el almacen, em caso contrario no sigo procesando
    if (get_campo('__PUBLICADO_OK__',xml2)<>'SI') then
    	xml2:=logapp(xml2,'Falla la Publicacion en Almacen '||get_campo('URI_IN',xml2));

	--20150224 FAY si algun DTE viene sin URI_IN no puede ser procesado, se guarda en cola_motor_sin_uri y se borra de las colas de trabajo
	if (length(get_campo('URI_IN',xml2))=0) then
		xml2 := sp_graba_cola_sin_uri(xml2);
		xml2 := put_campo(xml2,'STATUS_HTTP','200 OK');
		xml2 := responde_aml(xml2);
		return xml2;
	end if;	


	--Si es Borrador, lo dejo pasar., se maneja en las reglas
	if (strpos(get_campo('URI_IN',xml2),'http://pruebas')=0) then
		xml2 := put_campo(xml2,'STATUS_HTTP','400 NK');	
		xml2 := responde_aml(xml2);
		xml2 := sp_procesa_respuesta_cola_motor(xml2);
		return xml2;
	end if;
    end if;

    --Si es un ARM voy al flujo de los ARM
    if (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4arm') then
	xml2:=logapp(xml2,'ARM: DTE es un ARM');
	xml2 := put_campo(xml2,'__SECUENCIAOK__','1500');
	return xml2;
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4resp') then
	xml2:=logapp(xml2,'CA4RESP: DTE es un ca4resp');
	xml2 := put_campo(xml2,'__SECUENCIAOK__','1510');
	return xml2;
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4aec') then
	xml2:=logapp(xml2,'CA4AEC: DTE es un ca4aec');
	xml2 := put_campo(xml2,'__SECUENCIAOK__','1520');
	return xml2;
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4rec') then
	xml2:=logapp(xml2,'CA4REC: DTE es un ca4rec');
	xml2 := put_campo(xml2,'__SECUENCIAOK__','1530');
	return xml2;
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4eventos') then
	xml2:=logapp(xml2,'CA4EVENTOS: DTE es un ca4eventos');
	xml2 := put_campo(xml2,'STATUS_HTTP','400 NK');	
	xml2 := responde_aml(xml2);
	xml2 := sp_procesa_respuesta_cola_motor(xml2);
	xml2 := put_campo(xml2,'__SECUENCIAOK__','0');
	return xml2;
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4lib') then
        xml2:=logapp(xml2,'CA4LIB: DTE es un ca4lib');
	--RME 20151126
	xml2 := put_campo(xml2,'ORIGEN_LIBRO',get_campo('SCRIPT_NAME',xml2));
        xml2 := put_campo(xml2,'__SECUENCIAOK__','700');
        return xml2;
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4rcf') then
        xml2:=logapp(xml2,'CA4RCF: DTE es un ca4rcf');
        xml2 := put_campo(xml2,'__SECUENCIAOK__','710');
        return xml2;
    --Si es un DTE importado
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4importer') then
	xml2:=proc_ca4_importer_8010(xml2);
	return xml2;
    --paso a prod anula folios 20151124
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4anula') then
	 xml2:=logapp(xml2,'CA4ANULA: UPDATE Anula Folios SII');
        json1 := '{}';
        data_anulacion := decode(get_campo('INPUT',xml2),'hex');
        json1 := put_json(json1,'RUTEMISOR',get_xml('RUTEmisor',data_anulacion));
        json1 := put_json(json1,'FECHASOLICITUD',get_xml('FechaSolicitud',data_anulacion));
        json1 := put_json(json1,'TIPODTE',get_xml('TipoDTE',data_anulacion));
        json1 := put_json(json1,'FOLIOINICIAL',get_xml('FolioInicial',data_anulacion));
        json1 := put_json(json1,'FOLIOFINAL',get_xml('FolioFinal',data_anulacion));
        json1 := put_json(json1,'MOTIVOANULACION',get_xml('MotivoAnulacion',data_anulacion));
        json1 := put_json(json1,'URI',get_campo('URI_IN',xml2));
        json1 := put_json(json1,'PARAMETRO1',get_xml('Parametro1',data_anulacion));
        json1 := put_json(json1,'PARAMETRO2',get_xml('Parametro2',data_anulacion));
        json1 := put_json(json1,'PARAMETRO3',get_xml('Parametro3',data_anulacion));
        json1 := put_json(json1,'PARAMETRO4',get_xml('Parametro4',data_anulacion));
        json1 := guardar_solicitud_anula_folios(json1);
        xml2 := put_campo(xml2,'RESPUESTA',get_json('__Respuesta__',json1));
        xml2 := put_campo(xml2,'STATUS_HTTP','200 OK');
        xml2 := sp_procesa_respuesta_cola_motor(xml2);
        xml2 := put_campo(xml2,'__SECUENCIAOK__','0');
        return xml2;
    --Si es un DTE importado
    elsif (get_campo('SCRIPT_NAME',xml2)='/ca4/ca4importer') then
        xml2:=proc_ca4_importer_8010(xml2);
        return xml2;
    end if;

  
    xml2 := reglas.parseo_datos(xml2);
	
    --Si no parseo bien y no es un DTE
    if (get_campo('__BASURA_CON_URI__',xml2)='SI') then
	 xml2 := put_campo(xml2,'__SECUENCIAOK__','510');
         return xml2;
    elsif (get_campo('__BASURA__',xml2)='SI') then
	 --Grabo Evento en la traza con error
	 xml2 := graba_bitacora(xml2,'ERROR_DTE');
	 xml2 := put_campo(xml2,'__SECUENCIAOK__','500');
	 return xml2;
    end if;

    if (get_campo('BORRADOR',xml2)<>'SI') then
	    xml2:=procesa_documentos_relacionados(xml2);
    end if;

    --Procesador de Reglas
    xml2 := reglas.validacion(xml2);
    --Si la regla debe llamar otro flujo..
    if get_campo('__EXIT__',xml2)='1' then
   	 resp1:=get_campo('RESPUESTA',xml2); 
	 respuesta1:=split_part(resp1,chr(10)||chr(10),2);
	 if (strpos(resp1,'200 OK')>0) then
        	status1:='Status: 200 OK'||chr(10)||
                 'Content-type: text/html'||chr(10)||
                 'Content-Location: '||get_campo('URI',xml1)||chr(10)||
                 'Content-length: '||length(respuesta1)||chr(10);
	        xml2 := logapp(xml2,'Respuesta Servicio 200 OK URI'||get_campo('URI',xml1));
	 else
        	status1:='Status: 400 Rechazado'||chr(10)||'Content-type: text/html'||chr(10)||'Content-length: '||length(respuesta1)||chr(10);
	        xml2 := logapp(xml2,'Respuesta Servicio 400 Rechazado (8010) URI'||get_campo('URI',xml1));
   	 end if;
    	xml2:=put_campo(xml2,'RESPUESTA',status1||chr(10)||respuesta1);
	xml2 := sp_procesa_respuesta_cola_motor(xml2);
	--xml2 := put_campo(xml2,'INPUT','');
	RETURN xml2;
    end if;
    --raise notice 'len2=%',length(split_part(get_campo('INPUT',xml2),chr(10)||chr(10),2));
    
    --raise notice 'despues reglas';
    if (get_campo('BORRADOR',xml2)<>'SI') then
	xml2 := put_campo(xml2,'ESTADO_INICIAL_DTE','INGRESADO');
    	xml2 := insert_dte(xml2);
    end if;
        
    --Graba Bitacora
    xml2:= put_campo(xml2,'COMENTARIO_TRAZA','');
    xml2 := graba_bitacora(xml2,'INGRESADO');
    --Grabo Eventos de Timbre y Firma
    --xml2:= put_campo(xml2,'FECHA_EVENTO',get_campo('FECHA_TIMBRE',xml2));
    --xml2 := graba_bitacora(xml2,'TMB');
    xml2:= put_campo(xml2,'FECHA_EVENTO',get_campo('FECHA_FIRMA',xml2));
    xml2 := graba_bitacora(xml2,'FRM');

    --2015-03-10 FAY,ILB para todos los DTE se envian los eventos a cuadratura inmediatamente
    --Graba Eventos hacia cuadratura solo para manager
    --if (strpos(get_campo('URI_IN',xml2),'manager')>0) then
	xml2:= put_campo(xml2,'PRIORIDAD_CUADRATURA','0');
	--Grabo eventos de Cuadratura
    	xml2:=put_campo(xml2,'FECHA_EVENTO_EMI',get_campo('FECHA_EMISION',xml2));
    	xml2:=graba_evento_cuadratura('EMI',xml2);
        --Esta fecha se llena en graba_bitacora dinamicamente FECHA_EVENTO_(Nombre Evento)
        xml2:=graba_evento_cuadratura('PUB',xml2);
	xml2:= put_campo(xml2,'PRIORIDAD_CUADRATURA','');
    --end if;
    
   
    --Este flag indica que no se procesara con el AML
    if get_campo('__FLUJO_EXIT__',xml2)='SI' then
	return xml2;
    end if;
  
    --Si es Borrador lo borro de la cola
    if (get_campo('BORRADOR',xml2)='SI') then
                --Se Responde OK
                xml2:=put_campo(xml2,'RESPUESTA','Status: 200 OK'||chr(10)||
                'Content-type: text/html; charset=iso-8859-1'||chr(10)||
                'Content-length: 0'||chr(10)||
                'Vary: Accept-Encoding'||chr(10)||chr(10));
                xml2 := put_campo(xml2,'__SECUENCIAOK__','0');
		xml2 := sp_procesa_respuesta_cola_motor(xml2);
		return xml2;
    end if;


   --2015-03-26 FAY,RME.ILB Todos los DTE que no sean CGE se van directo al EDTE
   xml2:=put_campo(xml2,'RUT_CGE',get_campo('RUT_EMISOR',xml2));
   xml2:=verifica_evento_cge(xml2);
   if (get_campo('EVENTO_CGE',xml2)<>'SI' and get_campo('TIPO_DTE',xml2) not in ('39','41')) then
	xml2 := logapp(xml2,'Flujo Directo EDTE');
	xml2 := put_campo(xml2,'__SECUENCIAOK__','110');
	return xml2;
   elsif (get_campo('EVENTO_CGE',xml2)='SI' and get_campo('TIPO_DTE',xml2) not in ('39','41')) then
	xml2 := put_campo(xml2,'SCRIPT_NAME','/ca4/ca4dte');
       	xml2 := put_campo(xml2,'SERVER_NAME','cge-pub.acepta.com');
        xml2 := put_campo(xml2,'SCRIPT_URL','/ca4/ca4dte');
       	xml2 := put_campo(xml2,'SCRIPT_URI','http://cge-pub.acepta.com/ca4/ca4dte');
        xml2 := put_campo(xml2,'REQUEST_URI','/ca4/ca4dte');
    end if;


    --Si una Boleta y tiene mandato
    if (get_campo('TIPO_DTE',xml2) in ('39','41') and get_campo('__DTE_CON_MANDATO__',xml2)='SI') then
	if (get_campo('EVENTO_CGE',xml2)='SI') then
		xml2:=get_parametros_motor(xml2,'MANDATO_CGE');
	else
		xml2:=get_parametros_motor(xml2,'MANDATO_NORMAL');
	end if;
	--Para que borre despues de ejecutar el envio de mandatos
	xml2 := put_campo(xml2,'STATUS_HTTP','200 OK');
        xml2 := responde_aml(xml2);
        xml2 := put_campo(xml2,'__SECUENCIAOK__','1600');
	return xml2;
    end if;




    --servicio directo al AML
    --raise notice 'arma scgi';
    xml2:=arma_scgi(xml2);

    --xml2 := logapp(xml2,'URI(8010)='||get_campo('URI',xml2));
    --Si la URI viene como http://cencosud se va al 4007, secuencia 37
    --Asi evitamos el loop, ya que AML vuelve a enviar al apache!!
   if (strpos(get_campo('URI_IN',xml2),'http://cencosud')>0) then
		xml2 := logapp(xml2,'Filtro Cencosud');
                xml2 := put_campo(xml2,'__SECUENCIAOK__','37');
		return xml2;
   end if;
   if (strpos(get_campo('URI_IN',xml2),'http://windte')>0) then
		xml2 := logapp(xml2,'Filtro Windte');
                xml2 := put_campo(xml2,'__SECUENCIAOK__','34');
		return xml2;
   end if;
    
   --Determino a que AML tengo que ir
   host1=get_campo('SERVER_NAME',xml2);
   url1:=get_campo('SCRIPT_NAME',xml2);
   xml2 := logapp(xml2,'Server '||host1||' Url '||url1);
   select * into stSecuencia from secuencia_aml where server_name=host1 and script_name=url1;
   if found then
                xml2 := put_campo(xml2,'__SECUENCIAOK__',stSecuencia.secuencia);
   else
                xml2 := logapp(xml2,'FALLA SERVER_NAME='||host1||' SCRIPT_NAME='||url1||' no definido');
		--Vamos a publicar el DTE
                --xml2 := put_campo(xml2,'__SECUENCIAOK__','1000');
                xml2 := put_campo(xml2,'__SECUENCIAOK__','0');
		xml2 := sp_procesa_respuesta_cola_motor(xml2);
   end if;
   
   --raise notice 'exit ';
   return xml2;
END;
$$ LANGUAGE plpgsql;

CREATE or replace FUNCTION proc_procesa_respuesta_dte(varchar) RETURNS varchar AS $$
DECLARE
    xml1	alias for $1;
    xml2	varchar;
    data1	varchar;
    resp1	varchar;
    sts		integer;
    texto_resp1	varchar;
    respuesta1	varchar;
    status1	varchar;
BEGIN
    xml2:=xml1;
    data1:=get_campo('INPUT',xml2);
    xml2 := put_campo(xml2,'__SECUENCIAOK__','0');
    --Si hay respuesta del AML

    --Limpio el INPUT para el LOG
    resp1:= get_campo('RESPUESTA',xml2);
    --Si viene este texto entonces AML responde OK
    texto_resp1 := 'URL(True): '||get_campo('URI_IN',xml2);

    --Verifico si me fue bien con el AML
    --Debe contestar un OK y debe venir la URI que se envio a la entrada
    --if strpos(resp1,'200 OK')>0 then
    if (strpos(resp1,'200 OK')>0 and strpos(resp1,texto_resp1)>0) then
	--Un documento reprocesado, que se envia al AML, se puede borrar de la cola de procesamiento
	if (get_campo('_REPROCESO_',xml2)='SI') then
		xml2 := put_campo(xml2,'_ESTADO_REPROCESO_','OK');
		xml2 := logapp(xml2,'Reproceso Marcado OK');
	end if;

    	xml2 := put_campo(xml2,'ESTADO','ENVIADO_EDTE');
        xml2 := graba_bitacora(xml2,'ENVIADO_AML');
	xml2 := logapp(xml2,'FOLIO='||get_campo('FOLIO',xml2)||' RUT_EMISOR='||get_campo('RUT_EMISOR',xml2)||' TIPO_DTE='||get_campo('TIPO_DTE',xml2)||' EMITIDO');
    
	--Saco los datos que requiero de la respuesta
	xml2 := put_campo(xml2,'URI',get_tag_http(resp1,'URL(True): '));
    
	-- Guardo la boleta en Por ahora. Pendiente las Boletas Exentas
	if (get_campo('TIPO_DTE',xml2) in ('39','41')) then
	    --Actualizo esta de la boleta
            xml2 := graba_bitacora(xml2,'GRABADO_BOLETA_OK');
	    xml2 := logapp(xml2,'GRABADO BOLETA OK FOLIO='||get_campo('FOLIO',xml2)||' RUT_EMISOR='||get_campo('RUT_EMISOR',xml2));
    	    xml2 := put_campo(xml2,'ESTADO','BOLETA_GRABADA_OK');
    	    xml2 := put_campo(xml2,'ESTADO_SII','BOLETA_GRABADA_OK');
	    xml2 := logapp(xml2,'##BOLETA39 FOLIO='||get_campo('FOLIO',xml2));
	end if;

	--SI se activo en alguna regla el TAG __FLUJO_POST_EXIT__ se ejecuta la secuencia de __SECUENCIA_POST_OK__
        if (get_campo('__FLUJO_POST_EXIT__',xml2)='SI') then
		xml2 := logapp(xml2,'Activa Flujo Post Secuencia '||get_campo('__SECUENCIA_POST_OK__',xml2));
                xml2 := put_campo(xml2,'__SECUENCIAOK__',get_campo('__SECUENCIA_POST_OK__',xml2));
        end if;
    else
	xml2 := logapp(xml2,'FOLIO='||get_campo('FOLIO',xml2)||' RUT_EMISOR='||get_campo('RUT_EMISOR',xml2)||' TIPO_DTE='||get_campo('TIPO_DTE',xml2)||' Falla Respuesta AML');
    	xml2 := put_campo(xml2,'ESTADO','ERROR_AML');
        xml2 := graba_bitacora(xml2,'ERROR_AML');
	xml2 := logapp(xml2,resp1);
    end if; 

    if (get_campo('BORRADOR',xml2)<>'SI') then
        xml2 := update_dte(xml2);
    end if;
    --TODO hacer un control cuando falle el update
    --xml2 := put_campo(xml2,'INPUT','');
    respuesta1:=split_part(resp1,chr(10)||chr(10),2);
    if (strpos(resp1,'200 OK')>0) then
        status1:='Status: 200 OK'||chr(10)||
                 'Content-type: text/html'||chr(10)||
                 'Content-Location: '||get_campo('URI',xml1)||chr(10)||
                 'Content-length: '||length(respuesta1)||chr(10);
        xml2 := logapp(xml2,'Respuesta Servicio 200 OK URI'||get_campo('URI',xml1));
    else
        status1:='Status: 400 Rechazado'||chr(10)||'Content-type: text/html'||chr(10)||'Content-length: '||length(respuesta1)||chr(10);
        xml2 := logapp(xml2,'Respuesta Servicio 400 Rechazado (8010) URI'||get_campo('URI',xml1));
    end if;
    xml2:=put_campo(xml2,'RESPUESTA',status1||chr(10)||respuesta1);
                
    xml2 := sp_procesa_respuesta_cola_motor(xml2);

    --Respondo lo que viene
    RETURN xml2;
END;
$$ LANGUAGE plpgsql;



CREATE or replace FUNCTION proc_ca4_importer_8010(varchar) RETURNS varchar AS $$
DECLARE
    xml1        alias for $1;
    xml2    varchar;
BEGIN
    xml2:=xml1;
    xml2:=logapp(xml2,'CA4IMPORTER: Dte para importar');
        xml2 := put_campo(xml2,'__FLAG_IMPORTER__','SI');
        --Parseo los datos
        xml2 := reglas.parseo_datos(xml2);
        --Si no parseo bien y no es un DTE
        if (get_campo('__BASURA_CON_URI__',xml2)='SI') then
            xml2 := put_campo(xml2,'__SECUENCIAOK__','510');
            return xml2;
         elsif (get_campo('__BASURA__',xml2)='SI') then
             --Grabo Evento en la traza con error
             xml2 := graba_bitacora(xml2,'ERROR_DTE');
             xml2 := put_campo(xml2,'__SECUENCIAOK__','500');
             return xml2;
        end if;
        --Aplico algunas reglas
        xml2:=reglas.maestro_clientes(xml2);
        if get_campo('__EXIT__',xml2)='1' then
                xml2 := put_campo(xml2,'STATUS_HTTP','400 NK');
                xml2 := responde_aml(xml2);
                xml2 := sp_procesa_respuesta_cola_motor(xml2);
                xml2 := logapp(xml2,'Respuesta Servicio 400 Rechazado (No es cliente) URI'||get_campo('URI',xml1));
                return xml2;
        end if;
        xml2:=reglas.proxy_dte(xml2);
        if get_campo('__EXIT__',xml2)='1' then
                xml2 := put_campo(xml2,'STATUS_HTTP','200 OK');
                xml2 := responde_aml(xml2);
                xml2 := sp_procesa_respuesta_cola_motor(xml2);
                return xml2;
        end if;
        --Insertamos
        xml2:=insert_DTE(xml2);
        xml2 := put_campo(xml2,'STATUS_HTTP','200 OK');
	xml2 := put_campo(xml2,'RESPUESTA','Status: 200 OK');

        xml2 := responde_aml(xml2);
        xml2 := sp_procesa_respuesta_cola_motor(xml2);
        return xml2;
END;
$$ LANGUAGE plpgsql;

CREATE or replace FUNCTION proc_ca4_importer_8010(varchar) RETURNS varchar AS $$
DECLARE
    xml1        alias for $1;
    xml2    varchar;
BEGIN
    xml2:=xml1;
    xml2:=logapp(xml2,'CA4IMPORTER: Dte para importar');
        xml2 := put_campo(xml2,'__FLAG_IMPORTER__','SI');
        --Parseo los datos
        xml2 := reglas.parseo_datos(xml2);
        --Si no parseo bien y no es un DTE
        if (get_campo('__BASURA_CON_URI__',xml2)='SI') then
            xml2 := put_campo(xml2,'__SECUENCIAOK__','510');
            return xml2;
        elsif (get_campo('__BASURA__',xml2)='SI') then
             --Grabo Evento en la traza con error
             xml2 := graba_bitacora(xml2,'ERROR_DTE');
             xml2 := put_campo(xml2,'__SECUENCIAOK__','500');
             return xml2;
        end if;
        --Aplico algunas reglas
        xml2:=reglas.maestro_clientes(xml2);
        if get_campo('__EXIT__',xml2)='1' then
                xml2 := put_campo(xml2,'STATUS_HTTP','400 NK');
                xml2 := responde_aml(xml2);
                xml2 := sp_procesa_respuesta_cola_motor(xml2);
                xml2 := logapp(xml2,'Respuesta Servicio 400 Rechazado (No es cliente) URI'||get_campo('URI',xml1));
                return xml2;
        end if;
        xml2:=reglas.proxy_dte(xml2);
        if get_campo('__EXIT__',xml2)='1' then
               -- xml2 := put_campo(xml2,'STATUS_HTTP','200 OK');
                xml2 := put_campo(xml2,'RESPUESTA','Status: 200 OK');
                xml2 := sp_procesa_respuesta_cola_motor(xml2);
                xml2 := responde_aml(xml2);
                return xml2;
        end if;
        --Insertamos
        xml2 := put_campo(xml2,'ESTADO_INICIAL_DTE','IMPORTADO');
        xml2 := put_campo(xml2,'ESTADO_SII','IMPORTADO');
        xml2 := insert_DTE(xml2);
        xml2 := put_campo(xml2,'STATUS_HTTP','200 OK');
        xml2 := put_campo(xml2,'RESPUESTA','Status: 200 OK');

        --RME 20151202 se agrega Traza con comentario de Importado
        xml2:= put_campo(xml2,'COMENTARIO_TRAZA','Documento Importado');
        xml2:= put_campo(xml2,'FECHA_EVENTO',now()::varchar);
        xml2 := graba_bitacora(xml2,'IMP');
        xml2 := sp_procesa_respuesta_cola_motor(xml2);
        xml2 := responde_aml(xml2);
        return xml2;

END;
$$ LANGUAGE plpgsql;



/*
CREATE or replace FUNCTION proc_procesa_respuesta_boleta_8010(varchar) RETURNS varchar AS $$
DECLARE
    xml1	alias for $1;
	xml2	varchar;
    data1	varchar;
    resp1	varchar;
    sts		integer;
BEGIN
    xml2:=xml1;

    --Limpio el INPUT para el LOG
    xml2 := put_campo(xml2,'__SECUENCIAOK__','1000');

    --Verifico si me fue bien con el AML
    if (get_campo('RESPUESTA_BOLETA',xml2)='OK') then
        xml2 := graba_bitacora(xml2,'GRABADO_BOLETA_OK');
	xml2 := logapp(xml2,'GRABADO BOLETA OK FOLIO='||get_campo('FOLIO',xml2)||' RUT_EMISOR='||get_campo('RUT_EMISOR',xml2));
    	xml2 := put_campo(xml2,'ESTADO','BOLETA_GRABADA_OK');
    	xml2 := put_campo(xml2,'ESTADO_SII','BOLETA_GRABADA_OK');
    else
        xml2 := graba_bitacora(xml2,'FALLA_GRABADO_BOLETA');
	xml2 := logapp(xml2,'FALLA GRABADO BOLETA FOLIO='||get_campo('FOLIO',xml2)||' RUT_EMISOR='||get_campo('RUT_EMISOR',xml2));
    	xml2 := put_campo(xml2,'ESTADO','ERROR_GRABADO_BOLETA');
    	xml2 := put_campo(xml2,'ESTADO_SII','ERROR_GRABADO_BOLETA');
	--Si me va mal, contesto error
	xml2 := put_campo(xml2,'RESPUESTA','400 No Graba Boleta');
    end if;

    xml2 := update_dte(xml2);

    --Respondo lo que viene
    RETURN xml2;
END;
$$ LANGUAGE plpgsql;
*/
