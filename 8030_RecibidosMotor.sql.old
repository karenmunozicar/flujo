delete from isys_querys_tx where llave='8030';

insert into isys_querys_tx values ('8030',10,1,1,'select ensobra_dte_8030(''$$__JSONCOMPLETO__$$'') as __json__',0,0,0,1,1,-1,1000);

--Primero que hacemos el publicar DTE Recibido
insert into isys_querys_tx values ('8030',40,1,8,'Publica DTE',112704,0,0,0,0,50,50);

--Proceso el DTE REcibido
insert into isys_querys_tx values ('8030',50,1,1,'select verifica_publicacion_rec_8030(''$$__XMLCOMPLETO__$$'') as __xml__',0,0,0,1,1,-1,0);

insert into isys_querys_tx values ('8030',60,1,1,'select genera_crt_8030(''$$__JSONCOMPLETO__$$'') as __json__',0,0,0,1,1,-1,0);

insert into isys_querys_tx values ('8030',70,1,2,'Servicio de Firma 192.168.3.17',4013,109,106,0,0,80,80);

insert into isys_querys_tx values ('8030',80,1,1,'select verifica_firma_crt_8030(''$$__JSONCOMPLETO__$$'') as __json__',0,0,0,1,1,-1,0);
--Publica CRT
insert into isys_querys_tx values ('8030',90,1,8,'Publica DTE',112704,0,0,0,0,100,100);
insert into isys_querys_tx values ('8030',100,1,1,'select valida_pub_crt_8030(''$$__XMLCOMPLETO__$$'') as __xml__',0,0,0,1,1,-1,0);
--Envia mail CRT
insert into isys_querys_tx values ('8030',110,19,1,'select send_mail_crt_8030(''$$__JSONCOMPLETO__$$'') as __json__',0,0,0,1,1,-1,0);
--Graba evento
insert into isys_querys_tx values ('8030',120,1,1,'select graba_evento_crt_8030(''$$__XMLCOMPLETO__$$'') as __xml__',0,0,0,1,1,-1,0);

insert into isys_querys_tx values ('8030',1000,19,1,'select sp_procesa_respuesta_cola_motor88_json(''$$__JSONCOMPLETO__$$'') as __json__',0,0,0,1,1,0,0);


CREATE or replace FUNCTION verifica_publicacion_rec_8030(varchar) RETURNS varchar AS $$
DECLARE
        xml1        alias for $1;
        xml2    varchar;
	json_par1	json;
	json_aux	json;
	json_in		json;
	json_script1	json;
	resp_est	varchar;
	resp_cod	varchar;	
	glosa_es	varchar;
	glosa_er	varchar;
	output1		varchar;
	fecha1		varchar;
	xml3	varchar;
	cola1	varchar;
	v_nombre_tabla	VARCHAR;
	rut1	varchar;
	aux1	varchar;
BEGIN
    xml2:=xml1;
    xml2 := put_campo(xml2,'FLAG_NO_LIMPIA','SI');
    xml2 := put_campo(xml2,'FIRMA_DA','1');
    xml2 := proc_recibidos_fcgi_12703(xml2);
    xml2 := logapp(xml2,'RESPUESTA proc_recibidos_fcgi_12703 '||get_campo('RESPUESTA',xml2));
    if strpos(get_campo('RESPUESTA',xml2),'200 OK')=0 then
		--Si fallo, aumento reintentos
		xml2 := logapp(xml2,'Falla proc_recibidos_fcgi_12703');
		xml2 := put_campo(xml2,'__SECUENCIAOK__','1000');
		return xml2;
    end if;

    --Se guarda Evento RCP (Procesado por el receptor)
    rut1:=get_campo('RUT_EMISOR',xml2);
    aux1:=(select email from contribuyentes where rut_emisor=rut1::integer);
    --perform logfile('F_8030 '||aux1||' '||rut1::varchar);
    xml2:=put_campo(xml2,'MAIL_EMISOR',aux1);

    --Si estaba repetido 
    if (get_campo('FLAG_DTE_RECIBIDO_REPETIDO',xml2)='SI') then
		--Vamos a hacer el CRT
		xml2 := logapp(xml2,'DTE ya recibido, se envia CRT Repetido');
		xml2 := put_campo(xml2,'__SECUENCIAOK__','60');
		return xml2;
    end if;

    xml2:=put_campo(xml2,'COMENTARIO_TRAZA','Emite: '||coalesce(aux1,'-'));
    xml2:=graba_bitacora(xml2,'RCP');                               

    --Guardo en la traza el sobre de envio
    xml2:=put_campo(xml2,'COMENTARIO_TRAZA',get_campo('eml',xml2));
    xml2:=graba_bitacora(xml2,'SOBRE_ENVIO');
	
    xml2 := put_campo(xml2,'__SECUENCIAOK__','1000');

    --Antes de ir al sii verificamos que no haya estado en el reporte consolidado..
    if(get_campo('FLAG_RC_OK',xml2)='SI') then
	xml2:=logapp(xml2,'DTE encontrado en reporte consolidado, se da por validado el DTE en el SII');
	--Damos por validado el DTE en el SII
	xml2:=put_campo(xml2,'COMENTARIO_TRAZA','Glosa: DTE Recibido (DOK)*');
	xml2:=put_campo(xml2,'EVENTO','ASI');
	--xml2:=put_campo(xml2,'FECHA_EVENTO_ASI',get_campo('FECHA_RC_OK',xml2));
	xml2:=actualiza_estado_dte(xml2);
	xml2:=graba_bitacora(xml2,'ASI');
	xml2 := put_campo(xml2,'__SECUENCIAOK__','60');
	return xml2;
    end if;

	fecha1:=to_char(get_campo('FECHA_EMISION',xml2)::timestamp,'DD-MM-YYYY');
	
	json_par1:=get_parametros_motor_json('{}','BASE_COLAS');


	json_in:='{"RutCompania":"'||get_campo('RUT_EMISOR',xml2)||'","DvCompania":"'||modulo11(get_campo('RUT_EMISOR',xml2))||'","RutReceptor":"'||get_campo('RUT_RECEPTOR',xml2)||'","DvReceptor":"'||modulo11(get_campo('RUT_RECEPTOR',xml2))||'","TipoDte":"'||get_campo('TIPO_DTE',xml2)||'","FolioDte":"'||get_campo('FOLIO',xml2)||'","FechaEmisionDte":"'||fecha1||'","MontoDte":"'||get_campo('MONTO_TOTAL',xml2)||'"}';

	xml2:=logapp(xml2,'SII json='||json_in::varchar);
	json_aux:=query_db_json(get_json('__IP_CONEXION_CLIENTE__',json_par1),get_json_int('__IP_PORT_CLIENTE__',json_par1)::integer,'select curl_python(''escritorio.acepta.com:2020/estado_dte'','''||json_in::varchar||''')');
        if(get_json('STATUS',json_aux)<>'OK') then
		xml2 := logapp(xml2,'Falla Consulta SII');
		xml2 := put_campo(xml2,'RESPUESTA','Status: 400 NK');
		return xml2;
	end if;
        json_script1:=get_json('curl_python',json_aux);
        output1:=get_json('output',json_script1);
	resp_est:=get_xml_hex1('ESTADO',output1);
	resp_cod:=get_xml_hex1('ERR_CODE',output1);
	glosa_es:=get_xml_hex1('GLOSA_ESTADO',output1);
	glosa_er:=get_xml_hex1('GLOSA_ERR',output1);
	xml2:=logapp(xml2,'SII output1='||decode(output1,'hex')::varchar);
        if(resp_cod<>'') then
		--resp_est:='FALLA';
		if(resp_est='DOK') then
			xml2:=logapp(xml2,'DTE Documento Recibido por el SII. Datos Coinciden con los Registrados. ');
                        xml2:=put_campo(xml2,'COMENTARIO_TRAZA','Glosa: '||glosa_es||' ('||resp_est||')');
                        xml2:=put_campo(xml2,'EVENTO','ASI');
                        xml2:=actualiza_estado_dte(xml2);
                        xml2:=graba_bitacora(xml2,'ASI');
    			xml2 := put_campo(xml2,'__SECUENCIAOK__','60');
			return xml2;
		elsif(resp_est='DNK') then
			xml2:=logapp(xml2,'DTE Documento Recibido por el SII pero Datos NO Coinciden con los registrados. ');
                        xml2:=put_campo(xml2,'COMENTARIO_TRAZA','Glosa: '||glosa_es||' ('||resp_est||')');
                        xml2:=put_campo(xml2,'EVENTO','RSI');
                        xml2:=actualiza_estado_dte(xml2);
                        xml2:=graba_bitacora(xml2,'RSI');
	                xml2 := put_campo(xml2,'RESPUESTA','Status: 200 OK');
			return xml2;
		else
			--Lo graba en la cola para procesamiento posterior
		      /* xml3 := xml2;
		       xml3 := put_campo(xml3, 'TX','8040');
		       xml3 := put_campo(xml3, 'INPUT','');	
		       xml3 := put_campo(xml3, 'MD5_CERTIFICADO_X509','');	
			--Para que se procese en motor1
		       xml3 := put_campo(xml3, 'BD_ORIGEN','');	
		       xml3 := put_campo(xml3, '_LOG_','');	
        	       --Obtiene el valor de la cola que corresponde grabar
        	       cola1:=nextval('id_cola_procesamiento');
	               v_nombre_tabla:='cola_motor_'||cola1::varchar;
        	       execute 'insert into ' || v_nombre_tabla || ' (fecha,uri,reintentos,data,tx,rut_emisor,reproceso,categoria, nombre_cola) values ( now(),'||quote_literal(get_campo('URI_IN',xml2))||',8,'||quote_literal(xml3)||',20,'||quote_literal(get_campo('RUT_EMISOR',xml2))||',''NO'',''CONSULTA_SII'', '|| quote_literal(v_nombre_tabla) ||');';
			*/
	               xml2 := put_campo(xml2,'RESPUESTA','Status: 400 NK');
		       xml2 := logapp(xml2,'Falla Consulta SII');
		       --xml2 := put_campo(xml2,'RESPUESTA','Status: 200 OK');
		       return xml2;
		end if;
	else
		--Lo graba en la cola para procesamiento posterior
		xml2 := logapp(xml2,'Falla Consulta SII');
	        xml2 := put_campo(xml2,'RESPUESTA','Status: 400 NK');
		return xml2;
	end if;
	return xml2;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.ensobra_dte_8030(json) RETURNS json AS $$
DECLARE
    json1               alias for $1;
    json2               json;
        json3   json;
        patron_dte1     varchar;
        xml_dte1        varchar;
        dte1            varchar;
        esquema         varchar;
        uri1            varchar;
        rut1            varchar;
        campo           record;
        xml3            varchar;

	rut_emisor1	varchar;
	tipo_dte1	varchar;
	folio1		varchar;
	tms1		varchar;
	tms2		timestamp;
	certificado_x509	varchar;
	aux			varchar;
	rut_firma1		varchar;

	json_in	json;
BEGIN
        json2:=json1;
	json2:=put_json(json2,'__SECUENCIAOK__','1000');

	--Sacamos el xml del mail
	xml_dte1:=get_json('XML',json2);
	perform logfile('DAO_xml_dte1 '||replace(xml_dte1,chr(10),''));
	--Limpio XML
	json2:=put_json(json2,'XML','');
	--Para corregir Visualizacion
	xml_dte1:=encode('<DTE xmlns="http://www.sii.cl/SiiDte" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0"><Documento ','hex')||split_part(xml_dte1,encode('<Documento ','hex'),2);

        rut1:=split_part(get_xml_hex1('RUTRecep',xml_dte1),'-',1);

        select * into campo from maestro_clientes where rut_emisor=rut1::integer;
	if not found then
		if(now()-get_json('FECHA_INGRESO_COLA',json2)::timestamp>interval '5 days') then
			json2:=put_json(json2,'RESPUESTA','Status: 200 OK');
		else
			json2:=put_json(json2,'RESPUESTA','Status: 400 NK');
		end if;
		json2:=logjson(json2,'Rut Receptor no se encuentra en maestro_clientes '||rut1::varchar);
		return json2;
	end if;

        json2:=put_json(json2,'RAZON_SOC_RECEPTOR',campo.razon_social);
        json2:=put_json(json2,'RAZON_SOC_EMISOR',get_xml_hex1('RznSoc',xml_dte1));

	rut_emisor1:=split_part(get_xml_hex1('RUTEmisor',xml_dte1),'-',1);
	tipo_dte1:=get_xml_hex1('TipoDTE',xml_dte1);
	folio1:=get_xml_hex1('Folio',xml_dte1);
	tms1:=get_xml_hex1('TmstFirma',xml_dte1);
	
	if(is_number(rut_emisor1) is false or is_number(tipo_dte1) is false or is_number(folio1) is false) then
		json2:=put_json(json2,'RESPUESTA','Status: 200 OK');
		json2:=logjson(json2,'Datos Inválidos, no numéricos...');
		return json2;
	end if;
	BEGIN
		tms2:=tms1::timestamp;
	EXCEPTION WHEN OTHERS THEN
		json2:=put_json(json2,'RESPUESTA','Status: 400 NK');
		json2:=logjson(json2,'Fecha Firma Inválida');
		return json2;
	END;
	json2:=put_json(json2,'TmstFirma',tms1);

        uri1:='http://'||campo.dominio||to_char(now(),'YYMM')||'.acepta.com/v01/'||genera_uri(rut_emisor1,tipo_dte1,folio1,tms1,'R');
	json3:=put_json(json3,'Dominio',campo.dominio);
	json2:=put_json(json2,'DOMINIO_EMISOR',campo.dominio);

	json2:=logjson(json2,'Ensobro DTE Recibido '||uri1);

	certificado_x509:=replace(get_xml_hex1('X509Certificate',xml_dte1),' ','');
	--json2:=logjson(json2,'X509Certificate='||certificado_x509);
	aux:=verifica_certificado(certificado_x509);
	rut_firma1:=split_part(split_part(aux,'serialNumber=',2),'-',1);
	--Si no podemos sacar el rut correcto, ponemos el rut emisor
	if (is_number(rut_firma1) is false) then
		rut_firma1:=rut_emisor1;
	end if;

        json3:='{}';
        json3:=put_json(json3,'RUTEmisor',get_xml_hex1('RUTEmisor',xml_dte1));
        json3:=put_json(json3,'RutFirma',rut_firma1||'-'||modulo11(rut_firma1));
        json3:=put_json(json3,'Folio',folio1);
        json3:=put_json(json3,'FchEmis',get_xml_hex1('FchEmis',xml_dte1));
        json3:=put_json(json3,'RUTRecep',get_xml_hex1('RUTRecep',xml_dte1));
        json3:=put_json(json3,'RznSocRecep',get_xml_hex1('RznSocRecep',xml_dte1));
        json3:=put_json(json3,'DirRecep',get_xml_hex1('DirRecep',xml_dte1));
        json3:=put_json(json3,'NombreEmisor',get_xml_hex1('RznSoc',xml_dte1));
        json3:=put_json(json3,'SUCURSAL',get_xml_hex1('CdgSIISucur',xml_dte1));
        json3:=put_json(json3,'URI_IN',uri1);

	
	--Buscamos si existe xsl, en caso de que el emisor sea cliente de acepta...
	select * into campo from cache_xsl_emisor where rut_emisor=rut_emisor1::bigint and tipo_dte=tipo_dte1::integer order by fecha_ingreso desc limit 1;
	if found then
		json3:=put_json(json3,'XSL',campo.xsl);
		--Si el XSL tiene dominio, usamos este para el dte
		if (get_dominio_uri(campo.xsl)<>'') then
			json3:=put_json(json3,'Dominio',get_dominio_uri(campo.xsl));
		end if;
	else
		json3:=put_json(json3,'XSL','http://www.custodium.com/docs/otros/dte/dte.xsl');
	end if;

        patron_dte1:=pg_read_file('./patron_dte_10k/patron_dte_sin_custodium_rec.xml');
        if (patron_dte1='' or patron_dte1 is null) then
		json2:=put_json(json2,'RESPUESTA','Status: 400 NK');
		json2:=logjson(json2,'Falla Insercion no existe patron de DTE');
		return json2;
        end if;
        json3:=escape_xml_characters(json3::varchar)::json;
        dte1:=remplaza_tags_json_c(json3,patron_dte1);
        dte1:=limpia_tags(dte1);

        xml_dte1:=replace(encode(dte1::bytea,'hex'),encode('#|#|#|#DTE#|#|#|#','hex'),xml_dte1);

	json2:=put_json(json2,'INPUT',xml_dte1);
	json2:=put_json(json2,'CONTENT_LENGTH',(length(xml_dte1)/2)::varchar);
	json2:=put_json(json2,'URI_IN',uri1);
	json2:=put_json(json2,'__SECUENCIAOK__','40');
	return json2;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.genera_crt_8030(json) RETURNS json AS $$
DECLARE
        json1                   alias for $1;
        json2                   json;
        json3                   json;
        patron_dte1             varchar;
        xml_dte1                varchar;
        dte1                    varchar;
        campo                   record;
        campo1                  record;

        razonReceptor           varchar;
        razonEmisor             varchar;

        RecepEnvGlosa           varchar;
        estadoRecepcionEnvio    varchar;
        detallesEnvio           json;

        i                       integer;
        j                       integer;
        aux                     varchar;
        aux2                    json;
        dte                     varchar;
        detalleDte              json;
	rut_emisor1		varchar;
	rut_receptor1		varchar;
	detalle1		varchar;
	tms1			varchar;
	rut_firma1		varchar;
	pass1			varchar;
	id1			varchar;
	data_firma1		varchar;
	folio1			varchar;
	tipo_dte1		varchar;
	uri1		varchar;
	html1		varchar;
	json_aux1	json;
BEGIN
        json2:=json1;

	json2:=logjson(json2,'Se genera CRT');
	rut_emisor1:=get_json('RUT_EMISOR',json2);
	rut_receptor1:=get_json('RUT_RECEPTOR',json2);
	json3:='{}';
        json3:=put_json(json3,'RUTEmisor',rut_emisor1||'-'||modulo11(rut_emisor1));
        --Pablo Izquierdo
	rut_firma1:='5544700-4';
	pass1:='fkrran70aawwpq';
        json3:=put_json(json3,'RutFirma',rut_firma1);
        --Caratula
        json3:=put_json(json3,'RutResponde',rut_receptor1||'-'||modulo11(rut_receptor1));
        json3:=put_json(json3,'RutRecibe',rut_emisor1||'-'||modulo11(rut_emisor1));

	--secuencia (numero de identificacion de respuesta generado por quien responde)
        json3:=put_json(json3,'IdRespuesta',get_json('CODIGO_TXEL',json2));
        json3:=put_json(json3,'NroDetalles','1');
	tms1:=to_char(now(),'YYYY-MM-DD')||'T'||to_char(now(),'HH24:MM:SS');
        -- Fecha de la firma
        json3:=put_json(json3,'TmstFirmaResp',tms1);
        --RecepcionEnvio
        json3:=put_json(json3,'NmbEnvio',get_json('NmbEnvio',json2));
        json3:=put_json(json3,'FchRecep',tms1);
        json3:=put_json(json3,'FchRecepDis',to_char(now(),'DD/MM/YYYY'));
        -- secuencia (Codigo unico de envio generado por el receptor)
        json3:=put_json(json3,'CodEnvio',get_json('CODIGO_TXEL',json2));
        json3:=put_json(json3,'EnvioDTEID',split_part(get_json('NmbEnvio',json2),'.',1));
        json3:=put_json(json3,'Digest',get_json('DigestSobre',json2));
        json3:=put_json(json3,'RutEmisor',rut_emisor1||'-'||modulo11(rut_emisor1));
        json3:=put_json(json3,'RutReceptor',rut_receptor1||'-'||modulo11(rut_receptor1));


        json3:=put_json(json3,'NroDTE','1');
	
        json3:=put_json(json3,'RznSocResponde',get_json('RAZON_SOC_RECEPTOR',json2));
        json3:=put_json(json3,'RznSocRecibe',get_json('RAZON_SOC_EMISOR',json2));


	if (get_json('FLAG_DTE_RECIBIDO_REPETIDO',json2)='SI') then
		json2:=logjson(json2,'FLAG_DTE_RECIBIDO_REPETIDO URI_DTE_REPETIDO='||get_json('URI_DTE_REPETIDO',json2));
		--Si esta repetido, verificamos que realmente este el PRE en la traza
		--Del DTE encontrado en recibidos
		json_aux1:=lee_traza_evento(get_json('URI_DTE_REPETIDO',json2),'PRE');
		--Si ya se envio con dTe original, entonces es un repetido
		if (strpos(get_json('comentario1',json_aux1),'DTE Recibido (0)')>0) then
			json2:=logjson(json2,'PRE ya enviado');
			--Si ya envie 5 veces, no lo hago mas
			if (get_json('veces',json_aux1)::integer>5) then
				json2:=put_json(json2,'RESPUESTA','Status: 200 OK');
				json2:=logjson(json2,'PRE enviado muchas veces, se ignora el DTE');
				json2:=put_json(json2,'__SECUENCIAOK__','1000');
				return json2;
			end if;
			estadoRecepcionEnvio:='4';
			RecepEnvGlosa:='DTE No Recibido - DTE Repetido';
			json3:=put_json(json3,'EstadoRecepEnvM','RECHAZADO');
			json3:=put_json(json3,'RecepEnvGlosaM','EnvioDTE Recibido');
			json3:=put_json(json3,'DetalleGlosa','DTE No Recibido - DTE Repetido');
			json2:=logjson(json2,'Se envia CRT Repetido');
		else
			--No es un repetido, si el DTe original no tiene PRE Recibido
			estadoRecepcionEnvio:='0';
			RecepEnvGlosa:='Envio Recibido Conforme';
			json3:=put_json(json3,'EstadoRecepEnvM','RECIBIDO');
			json3:=put_json(json3,'RecepEnvGlosaM','EnvioDTE Recibido');
			json3:=put_json(json3,'DetalleGlosa','DTE Recibido');
			--Desmarcamos el FLAG
			json2:=put_json(json2,'FLAG_DTE_RECIBIDO_REPETIDO','');
			json2:=logjson(json2,'PRE no enviado, se envia OK');
		end if;
        else
		estadoRecepcionEnvio:='0';
		RecepEnvGlosa:='Envio Recibido Conforme';
		json3:=put_json(json3,'EstadoRecepEnvM','RECIBIDO');
		json3:=put_json(json3,'RecepEnvGlosaM','EnvioDTE Recibido');
		json3:=put_json(json3,'DetalleGlosa','DTE Recibido');
		json2:=logjson(json2,'PRE no enviado, se envia OK.');
	end if;
        json3:=put_json(json3,'EstadoRecepEnv',estadoRecepcionEnvio);
        json3:=put_json(json3,'RecepEnvGlosa',RecepEnvGlosa);
	
	folio1:=get_json('FOLIO',json2);
	tipo_dte1:=get_json('TIPO_DTE',json2);
        json3:=put_json(json3,'TipoDte',tipo_dte1);
        json3:=put_json(json3,'Folio',folio1);
	json3:=put_json(json3,'FechaEmision',to_char(to_timestamp(get_json('FECHA_EMISION',json2),'YYYY-MM-DD'),'DD/MM/YYYY'));
	json3:=put_json(json3,'MontoTotal',edita_monto(get_json('MONTO_TOTAL',json2)));
        
	uri1:='http://'||get_json('DOMINIO_EMISOR',json2)||to_char(now(),'YYMM')||'.acepta.com/v01/'||genera_uri(rut_emisor1,tipo_dte1,folio1,tms1,'R');
	json3:=put_json(json3,'custodium-uri',uri1);
	json2:=put_json(json2,'URI_CRT',uri1);

        patron_dte1:=pg_read_file('./patron_dte_10k/patron_crt.xml');
        if (patron_dte1='' or patron_dte1 is null) then
		json2:=put_json(json2,'RESPUESTA','Status: 400 NK');
		json2:=logjson(json2,'Falla Insercion no existe patron de DTE');
		return json2;
        end if;
        json3:=escape_xml_characters(json3::varchar)::json;
	detalle1:='<RecepcionDTE><TipoDTE>'||get_json('TIPO_DTE',json2)||'</TipoDTE><Folio>'||get_json('FOLIO',json2)||'</Folio><FchEmis>'||get_json('FECHA_EMISION',json2)||'</FchEmis><RUTEmisor>'||rut_emisor1||'-'||modulo11(rut_emisor1)||'</RUTEmisor><RUTRecep>'||rut_receptor1||'-'||modulo11(rut_receptor1)||'</RUTRecep><MntTotal>'||get_json('MONTO_TOTAL',json2)||'</MntTotal><EstadoRecepDTE>'||estadoRecepcionEnvio||'</EstadoRecepDTE><RecepDTEGlosa>'||RecepEnvGlosa||'</RecepDTEGlosa></RecepcionDTE>';
	json3:=put_json(json3,'Detalle_RecepcionDTE',detalle1);

	id1:='RespuestaDTE-'||rut_receptor1||'-'||modulo11(rut_receptor1)||'-'||rut_emisor1||'-'||modulo11(rut_emisor1)||'-'||to_char(now(),'YYYYMMDD')||'-'||get_json('IdRespuesta',json3);
	json3:=put_json(json3,'NODO_ID',id1);
	json2:=put_json(json2,'ID_MAIL',id1);
        dte1:=remplaza_tags_json_c(json3,patron_dte1);
        dte1:=limpia_tags(dte1);

	--Genero Html para el mail
        patron_dte1:=pg_read_file('./patron_dte_10k/patron_mail_acuse_recibo_inter.html');
        if (patron_dte1='' or patron_dte1 is null) then
		json2:=put_json(json2,'RESPUESTA','Status: 400 NK');
		json2:=logjson(json2,'Falla Insercion no existe patron de mail de acuse DTE');
		return json2;
        end if;
	html1:=remplaza_tags_json_c(json3,patron_dte1);
	html1:=limpia_tags(html1);
	json2:=put_json(json2,'html_mail_crt',encode(html1::bytea,'hex')::varchar);


	data_firma1:=replace('{"documento":"'||str2latin12base64(dte1)||'","nodoId":"'||id1||'","rutEmpresa":"'||rut_firma1||'","entidad":"SII","rutFirmante":"'||rut_firma1||'","codigoAcceso":"'||replace(pass1,chr(92),chr(92)||chr(92))||'"}',chr(10),'');
	--json2:=logjson(json2,'data_firma1='||data_firma1);
	json2:=get_parametros_motor_json(json2,'FIRMADOR');
        json2:=put_json(json2,'INPUT_FIRMADOR','POST '||get_json_upper('PARAMETRO_RUTA',json2)||' HTTP/1.1'||chr(10)||'User-Agent: curl/7.26.0'||chr(10)||'Host: '||get_json_upper('__IP_CONEXION_CLIENTE__',json2)||chr(10)||'Accept: '||chr(42)||'/'||chr(42)||chr(10)||'Content-Type: application/json; charset=ISO-8859-1'||chr(10)||'Content-Length: '||length(data_firma1)::varchar||chr(10)||chr(10)||data_firma1);


	json2:=put_json(json2,'__SECUENCIAOK__','70');

	return json2;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.verifica_firma_crt_8030(json) RETURNS json AS $$
DECLARE
        json1                   alias for $1;
        json2                   json;
        json3                   json;
	resp1	varchar;
	json_resp1	json;
	aux1	varchar;
	data1	varchar;
BEGIN
	json2:=json1;
	json2 :=put_json(json2,'__SECUENCIAOK__','1000');
	json2:=respuesta_no_chunked_json(json2);
        resp1:=decode(get_json_upper('RESPUESTA_HEX',json2),'hex');
        json_resp1:=split_part(resp1,'\012\012',2);
        json2:=put_json(json2,'RESPUESTA_HEX','');
        json2:=put_json(json2,'INPUT_FIRMADOR','');

       	if (strpos(resp1,'HTTP/1.1 200 ')>0) then
                aux1:=get_json('documentoFirmado',json_resp1);
                if (length(aux1)>0) then
			json2:=logjson(json2,'Servicio de Firma responde ok');	
		        data1:=base642hex(aux1);
                        json2:=put_json(json2,'INPUT',data1);
                        json2:=put_json(json2,'CONTENT_LENGTH',(length(data1)/2)::varchar);
                        --Se procesa por el 8010
                        json2:=put_json(json2,'SCRIPT_NAME','/ca4/ca4dte');
                        json2:=put_json(json2,'__SECUENCIAOK__','90');
                        json2:=put_json(json2,'RESPUESTA','');
			--Guardamos la URI del dte
			json2:=put_json(json2,'URI_REC',get_json('URI_IN',json2));
			json2:=put_json(json2,'URI_IN',get_json('URI_CRT',json2));
			--Limpiamos el publicado ok
			json2:=put_json(json2,'__PUBLICADO_OK__','');
			return json2;
		else
			json2:=logjson(json2,'Respuesta Firmador '||json_resp1::varchar);
			json2:=logjson(json2,'Servicio de Firma no responde documento Firmado');
			json2 := put_json(json2,'RESPUESTA','Status: 400 NK');
			return json2;
		end if;
	else
		json2:=logjson(json2,'Respuesta Firmador '||json_resp1::varchar);
		json2:=logjson(json2,'Servicio de Firma Falla');
	 	json2:= put_json(json2,'RESPUESTA','Status: 400 NK');
		return json2;
	end if;
        return json2;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.valida_pub_crt_8030(varchar) RETURNS varchar AS $$
DECLARE
        xml1                   alias for $1;
        xml2                   varchar;
BEGIN
	xml2:=xml1;
	if (get_campo('__PUBLICADO_OK__',xml2)<>'SI') then
		xml2:=logapp(xml2,'Falla la Publicacion en Almacen del CRT '||get_campo('URI_IN',xml2));
		xml2 := put_campo(xml2,'RESPUESTA','Status: 400 NK');
		xml2 := put_campo(xml2,'__SECUENCIAOK__','1000');
		return xml2;
	end if;
	--Vamos 
	xml2 := put_campo(xml2,'__SECUENCIAOK__','110');

	--Vamos a enviar 
        return xml2;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION public.graba_evento_crt_8030(varchar) RETURNS varchar AS $$
DECLARE
        xml1                   alias for $1;
        xml2                   varchar;
	rut1	varchar;
	aux1	varchar;
	lista1	json;
	i	integer;
	file1	varchar;
	j3	json;
BEGIN
        xml2:=xml1;
	xml2 := put_campo(xml2,'__SECUENCIAOK__','1000');
	xml2:=put_campo(xml2,'URI_IN',get_campo('URI_REC',xml2));
	xml2:=put_campo(xml2,'URL_GET',get_campo('URI_CRT',xml2));
	aux1:=get_campo('MAIL_EMISOR',xml2);
	if (get_campo('FLAG_DTE_RECIBIDO_REPETIDO',xml2)='SI') then
		rut1:=get_campo('RUT_EMISOR',xml2);
		aux1:=(select email from contribuyentes where rut_emisor=rut1::integer);
		xml2:=put_campo(xml2,'COMENTARIO_TRAZA','Recibe: '||coalesce(aux1,'-')||chr(10)||'Glosa: DTE Repetido (4)');
		xml2:=logapp(xml2,'URI_REC='||get_campo('URI_REC',xml2)||' URI_DTE_REPETIDO='||get_campo('URI_DTE_REPETIDO',xml2));
		--Si tienen uris distintas los relaciono
		if (get_campo('URI_REC',xml2)<>get_campo('URI_DTE_REPETIDO',xml2)) then
			--Relaciono el DTE repetido con el encontrado en dte_recibidos
			xml2:=logapp(xml2,'Se relaciona URI='||get_campo('URI_REC',xml2)||' URI_DTE_REPETIDO='||get_campo('URI_DTE_REPETIDO',xml2));
			aux1:=graba_documentos_relacionados(get_campo('URI_REC',xml2),get_campo('TIPO_DTE',xml2),get_campo('FOLIO',xml2),get_campo('URI_DTE_REPETIDO',xml2),get_campo('TIPO_DTE',xml2),get_campo('FOLIO',xml2));
		end if;
	else
		xml2:=put_campo(xml2,'COMENTARIO_TRAZA','Recibe: '||coalesce(aux1,'-')||chr(10)||'Glosa: DTE Recibido (0)');
	end if;
        xml2:=put_campo(xml2,'EVENTO','PRE');
        xml2:=graba_bitacora(xml2,'PRE');

	--Grabamos los archivos adjuntos en la traza si existen
	i:=0;
	lista1:=get_campo('adjuntos',xml2)::json;
	aux1:=get_json_index(lista1,i);
	while (aux1<>'') loop
		--Grabo Evento con Documento Adjunto
		j3:=aux1::json;	
		xml2:=put_campo(xml2,'COMENTARIO_TRAZA','PDF Adjunto en Sobre de Envío ('||get_json('nombre',j3)||')');
		xml2:=put_campo(xml2,'URL_GET',split_part(get_json('uri',j3),'.gz',1));
		xml2:=put_campo(xml2,'COMENTARIO2','PDF Adjunto');
		xml2:=graba_bitacora(xml2,'ADJ');	
		i:=i+1;
		aux1:=get_json_index(lista1,i);
	end loop;
        xml2 := put_campo(xml2,'RESPUESTA','Status: 200 OK');
        return xml2;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION public.send_mail_crt_8030(json) RETURNS json AS $$
DECLARE
        json1                   alias for $1;
        json2        json;
	json4	json;

	jsonsts1	json;
	input1	varchar;
	aux1	varchar;
	rut1	varchar;
BEGIN
	json2:=json1;
	json2:=put_json(json2,'__SECUENCIAOK__','1000');
	input1:=get_json('INPUT',json2);

	rut1:=get_json('RUT_RECEPTOR',json2);
	aux1:=(select email from contribuyentes where rut_emisor=rut1::integer);
	json2:=put_json(json2,'MAIL_RECEPTOR',aux1);
        json4:='{}';
        json4:=put_json(json4,'uri',get_json('URI_IN',json2));
	--perform logfile('INPUT_CUSTODIUM ANTES='||input1);
        json4:=put_json(json4,'INPUT_CUSTODIUM',encode('<RespuestaDTE','hex')||split_part(split_part(input1,encode('<RespuestaDTE','hex'),2),encode('</RespuestaDTE>','hex'),1)||encode('</RespuestaDTE>','hex'));
	json4:=put_json(json4,'flag_data_xml','SI'); --Para que no saque el contenido de la URI
	--perform logfile('INPUT_CUSTODIUM='||get_json('INPUT_CUSTODIUM',json4));
        json4:=put_json(json4,'subject_hex',encode(('Acuse de Recibo de DTEs -'||chr(10)||get_json('ID_MAIL',json2))::bytea,'hex'));
        json4:=put_json(json4,'from',get_json('RAZON_SOC_RECEPTOR',json2)||' <'||aux1||'>');
        json4:=put_json(json4,'to',get_json('MAIL_EMISOR',json2));
        --json4:=put_json(json4,'to','fernando.arancibia@acepta.com');
        json4:=put_json(json4,'tipo_envio','HTML');
	json4:=put_json(json4,'content_html',get_json('html_mail_crt',json2));
	json2:=put_json(json2,'html_mail_crt','');
        --Buscamos el xsl que le corresponde
        json4:=put_json(json4,'file_xsl','/opt/acepta/motor/xsl/CRT/comprobanterecepcion.xsl');
        json4:=put_json(json4,'ip_envio','172.16.14.82');
	json4:=put_json(json4,'adjunta_xml','SI');
	json4:=put_json(json4,'nombre_xml','crt_'||get_json('FOLIO',json2)||'_'||get_json('TIPO_DTE',json2));
	--perform logfile('F_8030 select send_mail_python2('''||json4::varchar||''')');
	jsonsts1:=send_mail_python2(json4::varchar);
        if (get_json('status',jsonsts1)='OK') then
		json2:=logjson(json2,'Envio CRT Exitoso');
		json2:=put_json(json2,'INPUT','');
		json2:=put_json(json2,'__SECUENCIAOK__','120');
	else
		json2:=logjson(json2,'Envio CRT Fallido');
		json2:= put_json(json2,'RESPUESTA','Status: 400 NK');
	end if;
	return json2;
END;
$$ LANGUAGE plpgsql;

